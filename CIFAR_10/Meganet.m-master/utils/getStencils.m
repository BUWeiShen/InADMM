% =========================================================================
% function K = functionname(h,mode)
%
% prepares finite difference stencils 
%
% Input:
%  h      - grid size (scalar or vector)
%  mode   - flag controlling the order of finite difference operators 
%
% Output:
%  K      - stencils
%
% =========================================================================
function K = getStencils(h,mode)

if nargin==0
    help(mfilename);
    runMinimalExample;
    return;
end

if isscalar(h)
    if mode~= 7 
        h = h*ones(2,1);
    elseif mode == 7
        h = h*ones(3,1);
    end
end

if nargin==1 || isempty(mode)
    mode=6;
end

switch mode
    case {6,'secondOrder'}
        % get 6 stencils for second-order derivatives
        K        = zeros(3,3,6);
        K(:,:,1) =  [ 1  2  1;  2  4  2;  1  2  1]/16;                 % mass
        K(:,:,2) =  [-1  0  1; -2  0  2; -1  0  1]/(6*h(1));           % ddx
        K(:,:,3) =  [-1 -2 -1;  0  0  0;  1  2  1]/(6*h(2));           % ddy
        K(:,:,4) =  [ 1 -2  1;  2 -4  2;  1 -2  1]/(4*(h(1)^2));        % d^2/dx^2
        K(:,:,5) =  [ 1  2  1; -2 -4 -2;  1  2  1]/(4*(h(2)^2));        % d^2/dy^2
        K(:,:,6) =  [-1  0  1;  0  0  0;  1  0 -1]/(prod(h));          % d^2/dxdy
    case {9,'fourthOrder'}
        K = zeros(3,3,9);
        
        K(:,:,1) =  [ 1  2  1;  2  4  2;  1  2  1]/16;                 % mass
        K(:,:,2) =  [-1  0  1; -2  0  2; -1  0  1]/(6*h(1));           % ddx
        K(:,:,3) =  [-1 -2 -1;  0  0  0;  1  2  1]/(6*h(2));           % ddy
        K(:,:,4) =  [ 1 -2  1;  2 -4  2;  1 -2  1]/(4*(h(1)^2));        % d^2/dx^2
        K(:,:,5) =  [ 1  2  1; -2 -4 -2;  1  2  1]/(4*(h(2)^2));        % d^2/dy^2
        K(:,:,6) =  [-1  0  1;  0  0  0;  1  0 -1]/(prod(h));          % d^2/dxdy
        K(:,:,7) =  [-1  0  1;  2  0 -2; -1  0  1]/(2*h(1)^2*h(2));    % d3/dx^2dy
        K(:,:,8) =  [-1  2 -1;  0  0  0;  1 -2  1]/(2*h(1)*h(2)^2);    % d3/dxdy^2
        K(:,:,9) =  [-1  2 -1;  2 -4  2; -1  2 -1]/(2*prod(h)^2);        % d4/dx^2dy^2
    
    case {7,'3D'}
        K = zeros(3,3,3,7);
        
        K(:,:,1,1) =  [ 1  2  1;  2  4  2;  1  2  1];                 % mass
        K(:,:,2,1) =  2*[ 1  2  1;  2  4  2;  1  2  1];               % mass
        K(:,:,3,1) =  [ 1  2  1;  2  4  2;  1  2  1];                 % mass
        K(:,:,:,1) = K(:,:,:,1)/sum(vec(K(:,:,:,1)));
        
        
        K(:,:,1,2) =  [-1  0  1; -2  0  2; -1  0  1]/(6*h(1));           % ddx
        K(:,:,2,2) =  2*[-1  0  1; -2  0  2; -1  0  1]/(6*h(1));         % ddx
        K(:,:,3,2) =  [-1  0  1; -2  0  2; -1  0  1]/(6*h(1));           % ddx
        K(:,:,:,2) = K(:,:,:,2)/4;
        
       
        K(:,:,1,3) =  [-1 -2 -1;  0  0  0;  1  2  1]/(6*h(2));           % ddy
        K(:,:,2,3) =  2*[-1 -2 -1;  0  0  0;  1  2  1]/(6*h(2));         % ddy
        K(:,:,3,3) =  [-1 -2 -1;  0  0  0;  1  2  1]/(6*h(2));           % ddy
        K(:,:,:,3) = K(:,:,:,3)/4;
        
        K(:,:,1,4) =  [-1 -2 -1;  -2  -4  -2; -1  -2  -1]/(6*h(3));           % ddz
        K(:,:,2,4) =  [ 0  0  0;  0  0  0;  0   0   0]/(6*h(3));         % ddz
        K(:,:,3,4) =  [ 1  2  1;  2  4  2;  1   2   1]/(6*h(3));           % ddz
        K(:,:,:,4) = K(:,:,:,4)/4;

        K(:,:,1,5) =  [ 1 -2  1;  2 -4  2;  1 -2  1]/(4*(h(1)^2));        % d^2/dx^2
        K(:,:,2,5) =  2*[ 1 -2  1;  2 -4  2;  1 -2  1]/(4*(h(1)^2));        % d^2/dx^2
        K(:,:,3,5) =  [ 1 -2  1;  2 -4  2;  1 -2  1]/(4*(h(1)^2));        % d^2/dx^2
        K(:,:,:,5) = K(:,:,:,5)/4;
                
        K(:,:,1,6) =  [ 1  2  1; -2 -4 -2;  1  2  1]/(4*(h(2)^2));        % d^2/dy^2
        K(:,:,2,6) =  2*[ 1  2  1; -2 -4 -2;  1  2  1]/(4*(h(2)^2));        % d^2/dy^2
        K(:,:,3,6) =  [ 1  2  1; -2 -4 -2;  1  2  1]/(4*(h(2)^2));        % d^2/dy^2
        K(:,:,:,6) = K(:,:,:,6)/4;
        
        K(:,:,1,7) =  [ -1  -2  -1; -2 -4 -2;  -1  -2  -1]/(4*(h(3)^2));  % d^2/dz^2
        K(:,:,2,7) =  [  2   4   2;  4  8  4;   2   4   2]/(4*(h(3)^2));  % d^2/dz^2
        K(:,:,3,7) =  [ -1  -2  -1; -2 -4 -2;  -1  -2  -1]/(4*(h(3)^2));  % d^2/dz^2
        K(:,:,:,7) = K(:,:,:,7)/4;  
    
    otherwise
        error('%s: stencil mode does not exist',mfilename)
end


function runMinimalExample

h = 0.5;
K6 = feval(mfilename,h,6);
K9 = feval(mfilename,h,9);

figure(1); clf;
for k=1:6
    subplot(2,9,k)
    imagesc(K6(:,:,k)); 
    title(sprintf('K6(:,:,%d)',k));
end

for k=1:9
    subplot(2,9,9+k)
    imagesc(K9(:,:,k));
    title(sprintf('K9(:,:,%d)',k));
end


